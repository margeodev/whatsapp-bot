const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
require("dotenv").config();

const { getCategoryId, getCategoryName } = require("./utils/category");
const { getUserEmail, getUserName } = require("./utils/user");
const { getToken } = require("./services/auth");
const {
  salvarMensagem,
  listarMensagensPessoais,
  listarTotaisPorCategoria,
} = require("./services/message");

const GROUP_NAME = process.env.GROUP_NAME;
const WWEBJS_PATH = process.env.WWEBJS_PATH || "./.wwebjs_auth";

const client = new Client({
  authStrategy: new LocalAuth({ clientId: "meu-bot", dataPath: WWEBJS_PATH }),
  puppeteer: { headless: true, args: ["--no-sandbox", "--disable-setuid-sandbox"] },
});

client.on("qr", (qr) => {
  console.log("üì∑ Escaneie este QR Code com seu WhatsApp:");
  qrcode.generate(qr, { small: true });
});

client.on("ready", () => console.log("‚úÖ Client ready!"));

// üîπ Estados tempor√°rios por usu√°rio
const userStates = {};

/**
 * Envia o menu principal
 */
async function enviarMenu(chat) {
  const menu =
    `üìã *Menu de op√ß√µes*
1Ô∏è‚É£ - Listar despesas pessoais
2Ô∏è‚É£ - Listar despesas por categoria

üëâ Digite o n√∫mero da op√ß√£o desejada.`;
  await chat.sendMessage(menu);
}

/**
 * Envia o menu de categorias
 */
async function enviarMenuCategorias(chat) {
  const categorias =
    `üìä *Categorias dispon√≠veis*
1 - Moradia
2 - Supermercado
3 - Conta Consumo
4 - Transporte
5 - Lazer
6 - Sa√∫de
7 - Bares e Restaurantes
8 - Manuten√ß√£o Casa
9 - Padaria
10 - Farm√°cia
11 - Outros
12 - Pets
13 - Manuten√ß√£o Carro

üëâ Digite o n√∫mero da categoria ou *0* para voltar ao menu principal.`;
  await chat.sendMessage(categorias);
}

client.on("message_create", async (message) => {
  const chat = await message.getChat();

  if (!chat.isGroup || chat.name !== GROUP_NAME) return;
  if (!message.author) return;

  const userEmail = getUserEmail(message);
  const userName = getUserName(message);

  if (!userEmail) {
    console.log("‚ö†Ô∏è Usu√°rio n√£o reconhecido, ignorando mensagem");
    return;
  }

  const body = message.body.trim().toLowerCase();
  const rawTokens = body.split(/[,|-]/).map((t) => t.trim());

  if (body === "menu") {
    userStates[userEmail] = "awaitingMenuOption";
    await enviarMenu(chat);
    return;
  }

  // === MENU PRINCIPAL ===
  if (userStates[userEmail] === "awaitingMenuOption") {
    if (body === "1") {
      try {
        const result = await listarMensagensPessoais(userEmail, userName);

        if (!result.success) {
          await chat.sendMessage("‚ö†Ô∏è N√£o foi poss√≠vel consultar as despesas pessoais. Tente novamente mais tarde.");
          return;
        }

        const entries = result.data;
        if (!entries.length) {
          await chat.sendMessage("üì≠ Nenhuma despesa pessoal registrada neste m√™s.\n\n1Ô∏è‚É£ - Voltar ao menu principal");
          userStates[userEmail] = "awaitingPersonalAction";
          return;
        }

        let reply = `üìã *Despesas pessoais do m√™s:*\n\n`;
        let total = 0;
        entries.forEach((entry, index) => {
          const valor = Number(entry.amount);
          total += valor;
          reply += `${index + 1}. *${entry.description}* - ${valor.toLocaleString("pt-BR", {
            style: "currency",
            currency: "BRL",
          })}\n`;
        });

        reply += `\nüí∞ *Total:* ${total.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}\n`;
        reply += `\n1Ô∏è‚É£ - Voltar ao menu principal`;

        await chat.sendMessage(reply);
        userStates[userEmail] = "awaitingPersonalAction";
      } catch (err) {
        console.error("‚ùå Erro ao consultar despesas pessoais:", err.message);
        await chat.sendMessage("‚ö†Ô∏è Erro inesperado ao consultar despesas pessoais.");
      }

      return;
    }
    if (body === "2") {
      userStates[userEmail] = "awaitingCategoryOption";
      await enviarMenuCategorias(chat);
      return;
    }

    await chat.sendMessage("‚ö†Ô∏è Op√ß√£o inv√°lida. Digite apenas *1* ou *2*.");
    return;
  }

  // === DESPESAS PESSOAIS (VOLTAR) ===
  if (userStates[userEmail] === "awaitingPersonalAction") {
    if (body === "1") {
      userStates[userEmail] = "awaitingMenuOption";
      await enviarMenu(chat);
    } else {
      await chat.sendMessage("‚ö†Ô∏è Op√ß√£o inv√°lida. Digite *1* para voltar ao menu principal.");
    }
    return;
  }

  // === CATEGORIAS ===
  if (userStates[userEmail] === "awaitingCategoryOption") {
    if (body === "0") {
      userStates[userEmail] = "awaitingMenuOption";
      await enviarMenu(chat);
      return;
    }

    const categoryNum = parseInt(body, 10);
    const categorias = {
      1: "Moradia",
      2: "Supermercado",
      3: "Conta Consumo",
      4: "Transporte",
      5: "Lazer",
      6: "Sa√∫de",
      7: "Bares e Restaurantes",
      8: "Manuten√ß√£o Casa",
      9: "Padaria",
      10: "Farm√°cia",
      11: "Outros",
      12: "Pets",
      13: "Manuten√ß√£o Carro",
    };

    if (!categorias[categoryNum]) {
      await chat.sendMessage("‚ö†Ô∏è Categoria inv√°lida. Digite um n√∫mero entre 1 e 13 ou *0* para voltar.");
      return;
    }

    try {
      const result = await listarTotaisPorCategoria(userEmail, userName);

      if (!result.success) {
        await chat.sendMessage("‚ö†Ô∏è N√£o foi poss√≠vel consultar os totais por categoria. Tente novamente mais tarde.");
        return;
      }

      const totals = result.data;
      const categoriaSelecionada = categorias[categoryNum];
      const item = totals.find((t) =>
        categoriaSelecionada.toLowerCase().includes(t.categoryDescription.toLowerCase())
      );

      if (!item) {
        await chat.sendMessage(
          `üì≠ Nenhuma despesa encontrada para *${categoriaSelecionada}* neste m√™s.\n\n` +
          `1Ô∏è‚É£ - Voltar para categorias\n` +
          `2Ô∏è‚É£ - Voltar ao menu principal`
        );
        userStates[userEmail] = "awaitingCategoryAction";
        return;
      }

      await chat.sendMessage(
        `üìä *Resumo de ${categoriaSelecionada}:*\n\n` +
        `üí∞ Total: *${Number(item.total).toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}*\n\n` +
        `1Ô∏è‚É£ - Voltar para categorias\n` +
        `2Ô∏è‚É£ - Voltar ao menu principal`
      );

      userStates[userEmail] = "awaitingCategoryAction";
    } catch (err) {
      console.error("‚ùå Erro ao consultar totais por categoria:", err.message);
      await chat.sendMessage("‚ö†Ô∏è Erro inesperado ao consultar totais por categoria.");
    }

    return;
  }

  // === A√á√ïES AP√ìS VER CATEGORIA ===
  if (userStates[userEmail] === "awaitingCategoryAction") {
    if (body === "1") {
      userStates[userEmail] = "awaitingCategoryOption";
      await enviarMenuCategorias(chat);
    } else if (body === "2") {
      userStates[userEmail] = "awaitingMenuOption";
      await enviarMenu(chat);
    } else {
      await chat.sendMessage("‚ö†Ô∏è Op√ß√£o inv√°lida. Digite *1* para voltar √†s categorias ou *2* para o menu principal.");
    }
    return;
  }

  // === REGISTRO DE NOVA DESPESA ===
  let isPersonal = false;
  let description = "";
  let amount = "";

  if (rawTokens[0]?.toLowerCase() === "pessoal") {
    isPersonal = true;

    if (rawTokens.length < 3) {
      await chat.sendMessage(
        `‚ö†Ô∏è Formato inv√°lido para mensagem pessoal!\nUse: "pessoal, descri√ß√£o, valor" ou "pessoal - descri√ß√£o - valor"\n` +
        `Exemplos:\n` +
        `pessoal, almo√ßo, 25.50\n` +
        `pessoal - conta de energia - 25.50`
      );
      return;
    }

    description = rawTokens[1];
    amount = rawTokens[2];
  } else {
    description = rawTokens[0];
    amount = rawTokens[1];
  }

  if (!description || !amount || typeof amount !== "string") {
    await chat.sendMessage(
      `‚ö†Ô∏è Formato inv√°lido!\nUse: "descri√ß√£o, valor" ou "pessoal, descri√ß√£o, valor"\n` +
      `Exemplos:\n` +
      `Almo√ßo, 25.50\n` +
      `pessoal - mercado - 89.90`
    );
    return;
  }

  amount = amount.replace(",", ".");
  if (isNaN(Number(amount))) {
    await chat.sendMessage(
      `‚ö†Ô∏è Valor inv√°lido. Certifique-se de enviar um n√∫mero.\n` +
      `Exemplo: "Almo√ßo, 25.50"`
    );
    return;
  }
  const categoryId = getCategoryId(description);
  const categoryName = getCategoryName(categoryId);

  try {
    await getToken(userEmail);
    const result = await salvarMensagem(description, amount, categoryId, userEmail, isPersonal);

    if (result?.success) {
      await chat.sendMessage(
        `‚úÖ Registro inclu√≠do com sucesso!\n` +
        `üìå Descri√ß√£o: *${description}*\n` +
        `üí∞ Valor: *${Number(amount).toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}*\n` +
        `üè∑Ô∏è Categoria: *${categoryName}*` +
        `${isPersonal ? `\nüë§ Tipo: *Pessoal*` : ""}`
      );
    } else {
      await chat.sendMessage("‚ùå Ocorreu um erro ao incluir o registro, tente novamente.");
    }
  } catch (err) {
    console.error("‚ùå Erro inesperado:", err.message);
    await chat.sendMessage("‚ö†Ô∏è Erro inesperado ao processar sua mensagem.");
  }
});

client.initialize();
